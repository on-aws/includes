ResponseRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        -
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute

ResponseLambda:
  Type: AWS::Lambda::Function
  Properties:
    Handler: index.handler
    Role: !GetAtt LambdaRole.Arn
    Runtime: nodejs12.x
    Code:
      ZipFile: !Sub |
        'use strict';
        const https = require("https");
        const url = require("url");

        exports.handler = async (event, context) => {
          console.log(JSON.stringify(event));
          const { Status, Reason, Data, ResponseURL, PhysicalResourceId, LogicalResourceId, StackId, RequestId } = event;
          return new Promise((resolve, reject) => {
            const responseBody = JSON.stringify({
              Status,
              Reason,
              PhysicalResourceId,
              StackId,
              RequestId,
              LogicalResourceId,
              NoEcho: false,
              Data
            });

            const parsedUrl = url.parse(ResponseURL);
            const options = {
              hostname: parsedUrl.hostname,
              port: 443,
              path: parsedUrl.path,
              method: "PUT",
              headers: {
                "content-type": "",
                "content-length": responseBody.length
              }
            };

            const request = https.request(options, (response) => {
              console.log("Status code: " + response.statusCode);
              console.log("Status message: " + response.statusMessage);
              resolve(response);
            });

            request.on('error', (err) => {
              console.log({ err });
              reject(err);
            });

            request.write(responseBody);
            request.end();
          });
        };

LambdaLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Sub /aws/lambda/${ResponseLambda}
    RetentionInDays: 7
